# Árvore Vermelho e Preto Genérica (AVP)

Este projeto implementa uma Árvore Vermelho e Preto (AVP) genérica que pode armazenar qualquer tipo de dados que implemente a interface `Comparable<T>`.

## Estrutura do Projeto

```
AVPGenerica/
├── src/                    # Código-fonte
│   ├── AVP.java           # Implementação da árvore vermelho e preto genérica
│   ├── NoTriplo.java      # Nó da árvore com campo de cor
│   ├── Arborizavel.java   # Interface para árvores
│   └── AVPGenericaMainCLI.java # Interface de linha de comando
├── test/                   # Testes automatizados
│   └── AVPGenericaTest.java # Testes JUnit para AVP genérica
├── lib/                    # Bibliotecas
├── bin/                    # Arquivos compilados
├── build/                  # Arquivos de build
├── doc/                    # Documentação gerada
└── readme                  # Este arquivo
```

## Funcionalidades

### Operações Principais
- **Inserção**: Insere elementos mantendo as propriedades AVP
- **Busca**: Localiza elementos de qualquer tipo Comparable
- **Remoção**: Remove elementos mantendo o balanceamento
- **Impressão**: Exibe elementos em pré-ordem, em ordem e pós-ordem
- **Limpeza**: Remove todos os elementos da árvore

### Características da AVP Genérica
- **Tipo Genérico**: Aceita qualquer tipo que implemente `Comparable<T>`
- **Balanceamento Automático**: Mantém as propriedades da árvore vermelho e preto
- **Rotações**: Implementa rotações simples e duplas
- **Recoloração**: Ajusta cores dos nós para manter propriedades
- **Performance**: Operações O(log n) garantidas

## Tipos de Dados Suportados

### Tipos Primitivos (Wrapper Classes)
- **Integer**: Números inteiros
- **Double**: Números decimais
- **Character**: Caracteres
- **String**: Textos

### Tipos Customizados
Qualquer classe que implemente `Comparable<T>`:
```java
public class MinhaClasse implements Comparable<MinhaClasse> {
    // Implementação do compareTo
}
```

## Propriedades da Árvore Vermelho e Preto

1. **Raiz Preta**: A raiz é sempre preta
2. **Folhas Pretas**: Todas as folhas (null) são consideradas pretas
3. **Nós Vermelhos**: Nós vermelhos não podem ter filhos vermelhos
4. **Caminhos Negros**: Todos os caminhos da raiz às folhas têm o mesmo número de nós pretos

## Compilação e Execução

### Compilar o Projeto
```bash
cd arvore/Java/avp/AVPGenerica
javac -cp "lib/*" -d bin src/*.java
```

### Executar o CLI
```bash
java -cp bin AVPGenericaMainCLI
```

### Executar os Testes
```bash
javac -cp "lib/*" -d bin src/*.java test/*.java
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVPGenericaTest
```

## Exemplos de Uso

### 1. Inserir Elementos (String)
```
==== Árvore Vermelho e Preto Genérica ====
1. Inserir elemento (String)
2. Buscar elemento
3. Remover elemento
4. Imprimir elementos em ordem
5. Imprimir elementos em pré-ordem
6. Imprimir elementos em pós-ordem
7. Limpar árvore
8. Testar com inteiros
9. Testar com decimais
0. Sair

Escolha uma opção: 1
Digite o elemento a inserir: banana
Elemento inserido: banana
```

### 2. Testar com Inteiros
```
Escolha uma opção: 8
=== Teste com Inteiros ===
Elementos em ordem: 20 30 40 50 60 70 80
Elementos em pré-ordem: 50 30 20 40 70 60 80
Elementos em pós-ordem: 20 40 30 60 80 70 50
Existe 30? true
Existe 90? false
Removido: 30
Após remoção: 20 40 50 60 70 80
```

### 3. Testar com Decimais
```
Escolha uma opção: 9
=== Teste com Decimais ===
Elementos em ordem: 1.41 1.73 2.23 2.71 3.14
Elementos em pré-ordem: 2.71 1.41 1.73 2.23 3.14
Elementos em pós-ordem: 1.73 2.23 1.41 3.14 2.71
Existe 3.14? true
Existe 2.5? false
Removido: 2.71
Após remoção: 1.41 1.73 2.23 3.14
```

## Validações Implementadas

### Tratamento de Erros
- **Entradas Vazias**: Validação de strings vazias
- **Elementos Inexistentes**: Mensagens claras para busca/remoção
- **Exceções**: Captura e exibe erros de forma amigável

### Compatibilidade de Tipos
- **Comparable**: Todos os tipos devem implementar `Comparable<T>`
- **Null Safety**: Tratamento adequado de valores nulos
- **Type Safety**: Verificação de tipos em tempo de compilação

## Testes Implementados

### Casos de Teste por Tipo
- **String**: Inserção, busca, remoção e impressão
- **Integer**: Operações com números inteiros (positivos e negativos)
- **Double**: Operações com números decimais
- **Character**: Operações com caracteres

### Testes Específicos
- Inserção e busca de elementos
- Remoção de folhas, nós com um filho e dois filhos
- Operações em árvore vazia
- Inserção de elementos duplicados
- Balanceamento da árvore vermelho e preto
- Verificação das propriedades AVP
- Impressão em diferentes ordens
- Limpeza da árvore
- Testes com elementos negativos

### Executar Testes Específicos
```bash
# Teste com strings
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVPGenericaTest#testInserirEExisteString

# Teste com inteiros
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVPGenericaTest#testInserirEExisteInt

# Teste com decimais
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVPGenericaTest#testInserirEExisteDouble

# Teste de balanceamento
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVPGenericaTest#testBalanceamentoAVP
```

## Vantagens da AVP Genérica

1. **Flexibilidade**: Aceita qualquer tipo Comparable
2. **Reutilização**: Mesmo código para diferentes tipos
3. **Type Safety**: Verificação de tipos em tempo de compilação
4. **Performance**: Operações O(log n) garantidas
5. **Menos Rotações**: Comparada à AVL, faz menos rotações

## Comparação com Outras Árvores

| Característica | AVP Genérica | AVL | ABP |
|----------------|--------------|-----|-----|
| Balanceamento | Automático | Automático | Manual |
| Rotações | Menos | Mais | Nenhuma |
| Altura | ≤ 2log(n+1) | ≤ 1.44log(n+2) | O(n) |
| Complexidade | O(log n) | O(log n) | O(n) |
| Flexibilidade | Alta (genérica) | Média | Baixa |

## Exemplos de Uso Avançado

### Criando Árvore com Tipo Customizado
```java
public class Pessoa implements Comparable<Pessoa> {
    private String nome;
    private int idade;
    
    @Override
    public int compareTo(Pessoa outra) {
        return this.nome.compareTo(outra.nome);
    }
}

AVP<Pessoa> avpPessoas = new AVP<>();
avpPessoas.inserir(new Pessoa("Ana", 25));
avpPessoas.inserir(new Pessoa("João", 30));
```

### Árvore com Números Complexos
```java
public class Complexo implements Comparable<Complexo> {
    private double real, imaginario;
    
    @Override
    public int compareTo(Complexo outro) {
        return Double.compare(this.real, outro.real);
    }
}

AVP<Complexo> avpComplexos = new AVP<>();
avpComplexos.inserir(new Complexo(1.0, 2.0));
avpComplexos.inserir(new Complexo(3.0, 4.0));
```

## Autores

- **Cláudio Rodolfo Sousa de Oliveira**
- **Versão**: 1.0
- **Data**: July 1, 2025 