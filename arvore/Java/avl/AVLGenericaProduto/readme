# Árvore AVL de Produtos

Este projeto implementa uma Árvore AVL (Adelson-Velsky e Landis) para gerenciamento de produtos, mantendo a árvore balanceada automaticamente.

## Estrutura do Projeto

```
AVLGenericaProduto/
├── src/                    # Código-fonte
│   ├── AVL.java           # Implementação da árvore AVL genérica
│   ├── NoTriplo.java      # Nó da árvore com altura
│   ├── Arborizavel.java   # Interface para árvores
│   ├── Produto.java       # Classe de produto com validação
│   └── AVLProdutoMainCLI.java # Interface de linha de comando
├── test/                   # Testes automatizados
│   └── AVLProdutoTest.java # Testes JUnit para AVL de produtos
├── lib/                    # Bibliotecas
│   ├── junit-4.13.2.jar   # JUnit para testes
│   └── hamcrest-core-1.3.jar # Hamcrest para asserções
├── bin/                    # Arquivos compilados
├── build/                  # Arquivos de build
├── doc/                    # Documentação gerada
└── readme                  # Este arquivo
```

## Funcionalidades

### Operações Principais
- **Inserção**: Insere produtos mantendo a árvore balanceada
- **Busca**: Localiza produtos por código de barras
- **Remoção**: Remove produtos mantendo o balanceamento
- **Impressão**: Exibe produtos em pré-ordem, em ordem e pós-ordem
- **Limpeza**: Remove todos os produtos da árvore

### Características da AVL
- **Balanceamento Automático**: Mantém a altura da árvore balanceada
- **Rotações**: Implementa rotações simples e duplas
- **Altura**: Cada nó mantém sua altura para cálculo de balanceamento
- **Performance**: Operações O(log n) garantidas

## Compilação e Execução

### Compilar o Projeto
```bash
cd arvore/Java/avl/AVLGenericaProduto
javac -cp "lib/*" -d bin src/*.java
```

### Executar o CLI
```bash
java -cp bin AVLProdutoMainCLI
```

### Executar os Testes
```bash
javac -cp "lib/*" -d bin src/*.java test/*.java
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVLProdutoTest
```

## Exemplos de Uso

### 1. Inserir Produtos
```
==== Árvore AVL de Produtos ====
1. Inserir produto
2. Buscar produto
3. Remover produto
4. Imprimir produtos em ordem
5. Imprimir produtos em pré-ordem
6. Imprimir produtos em pós-ordem
7. Limpar árvore
0. Sair

Escolha uma opção: 1
Nome do produto: Café
Código de barras: 1001
Produto inserido: Produto(Café,1001)
```

### 2. Buscar Produto
```
Escolha uma opção: 2
Código de barras do produto a buscar: 1001
Produto encontrado: Produto(Café,1001)
```

### 3. Imprimir em Ordem
```
Escolha uma opção: 4
Produtos em ordem:
Café (1001) Leite (1002) Açúcar (1003)
```

## Validações Implementadas

### Classe Produto
- **Nome**: Não pode ser nulo ou vazio
- **Código de Barras**: Deve ser positivo
- **Equals/HashCode**: Baseados no código de barras
- **Comparable**: Ordenação por código de barras

### Tratamento de Erros
- **Entradas Inválidas**: Validação de números e strings
- **Produtos Inexistentes**: Mensagens claras para busca/remoção
- **Exceções**: Captura e exibe erros de forma amigável

## Testes Implementados

### Casos de Teste
- Inserção e busca de produtos
- Remoção de folhas, nós com um filho e dois filhos
- Operações em árvore vazia
- Inserção de produtos duplicados
- Balanceamento da árvore AVL
- Impressão em diferentes ordens
- Limpeza da árvore

### Executar Testes Específicos
```bash
# Teste de inserção
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVLProdutoTest#testInserirEExiste

# Teste de balanceamento
java -cp "bin:lib/*" org.junit.runner.JUnitCore AVLProdutoTest#testBalanceamentoAVL
```

## Vantagens da AVL

1. **Performance Garantida**: Todas as operações são O(log n)
2. **Balanceamento Automático**: Não requer intervenção manual
3. **Eficiência**: Menos rotações que árvores rubro-negras
4. **Simplicidade**: Algoritmos de rotação bem definidos

## Autores

- **Cláudio Rodolfo Sousa de Oliveira**
- **Versão**: 1.0
- **Data**: July 1, 2025
